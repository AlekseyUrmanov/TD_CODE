import cbpro
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import mplfinance as mpf
import datetime
import statistics


class FigureMaker:

    def __init__(self):
        pass

    def auth(self):
        key = '38ff39e7db27f252f45b41a943cdc505'
        secret = 'amnDw3wrf08JsvsfSYar+KkS6OVYIwZ5c+gz4/CxyrS/dcQRvYcbwWpF3V93pgcA/xfPN/QSJlmQZXZBy8xAXg=='
        passphrase = 'rb6ymq3638c'

        auth_client = cbpro.AuthenticatedClient(key=key, b64secret=secret, passphrase=passphrase)
        pub_client = cbpro.PublicClient()

        return pub_client, auth_client

    def _get_data(self, product, grain):
        # {DOT-USD} grain = 3600
        p, a = self.auth()

        data = p.get_product_historic_rates(product, granularity=grain)

        # time , low, high, open, close, volume
        # ISO 8601
        #  [60, 300, 900, 3600, 21600, 86400]
        #print(data)
        #data = [[1658725200, 7.085, 7.114, 7.098, 7.101, 14075.003], [1658721600, 7.016, 7.115, 7.062, 7.103, 45168.738], [1658718000, 7.014, 7.079, 7.073, 7.067, 43960.552], [1658714400, 7.041, 7.133, 7.116, 7.074, 89862.331], [1658710800, 7.071, 7.165, 7.165, 7.12, 134385.277], [1658707200, 7.1, 7.449, 7.389, 7.165, 151102.746], [1658703600, 7.36, 7.48, 7.428, 7.394, 40723.112], [1658700000, 7.413, 7.586, 7.497, 7.417, 49613.718], [1658696400, 7.416, 7.515, 7.429, 7.502, 21017.63], [1658692800, 7.407, 7.473, 7.419, 7.43, 27843.425], [1658689200, 7.39, 7.446, 7.413, 7.423, 21428.781], [1658685600, 7.387, 7.444, 7.44, 7.41, 38452.153], [1658682000, 7.382, 7.472, 7.41, 7.444, 37753.309], [1658678400, 7.388, 7.496, 7.488, 7.41, 32021.596], [1658674800, 7.427, 7.493, 7.44, 7.493, 34110.548], [1658671200, 7.325, 7.452, 7.377, 7.444, 46374.084], [1658667600, 7.34, 7.406, 7.363, 7.372, 23689.621], [1658664000, 7.344, 7.474, 7.448, 7.367, 39532.902], [1658660400, 7.413, 7.54, 7.421, 7.446, 39594.773], [1658656800, 7.372, 7.504, 7.487, 7.417, 37890.721], [1658653200, 7.475, 7.537, 7.512, 7.484, 19131.619], [1658649600, 7.452, 7.548, 7.468, 7.512, 30970.906], [1658646000, 7.455, 7.489, 7.465, 7.464, 16628.185], [1658642400, 7.454, 7.503, 7.476, 7.466, 15143.302], [1658638800, 7.378, 7.495, 7.38, 7.472, 43400.158], [1658635200, 7.334, 7.397, 7.34, 7.383, 25473.738], [1658631600, 7.337, 7.481, 7.467, 7.342, 26395.927], [1658628000, 7.318, 7.539, 7.351, 7.469, 64194.407], [1658624400, 7.31, 7.402, 7.352, 7.351, 33004.134], [1658620800, 7.326, 7.396, 7.326, 7.345, 29587.666], [1658617200, 7.316, 7.377, 7.34, 7.321, 37919.061], [1658613600, 7.24, 7.37, 7.249, 7.336, 28648.9], [1658610000, 7.24, 7.292, 7.276, 7.247, 33480.535], [1658606400, 7.197, 7.287, 7.203, 7.282, 84444.219], [1658602800, 7.082, 7.219, 7.119, 7.206, 36026.14], [1658599200, 7.09, 7.178, 7.136, 7.125, 33716.041], [1658595600, 7.12, 7.252, 7.229, 7.135, 90468.228], [1658592000, 7.223, 7.276, 7.248, 7.226, 48591.019], [1658588400, 7.202, 7.275, 7.214, 7.255, 39027.034], [1658584800, 7.167, 7.295, 7.267, 7.208, 55547.113], [1658581200, 7.231, 7.288, 7.242, 7.27, 43246.832], [1658577600, 7.092, 7.268, 7.167, 7.244, 109274.948], [1658574000, 7.166, 7.304, 7.296, 7.166, 60073.246], [1658570400, 7.248, 7.382, 7.339, 7.295, 48110.417], [1658566800, 7.303, 7.372, 7.331, 7.339, 37792.844], [1658563200, 7.301, 7.456, 7.409, 7.321, 38990.377], [1658559600, 7.356, 7.457, 7.44, 7.407, 45821.236], [1658556000, 7.404, 7.468, 7.421, 7.44, 16000.277], [1658552400, 7.413, 7.485, 7.446, 7.423, 39426.902], [1658548800, 7.354, 7.492, 7.361, 7.443, 16935.617], [1658545200, 7.336, 7.4, 7.353, 7.355, 37208.88], [1658541600, 7.334, 7.456, 7.392, 7.35, 31206.444], [1658538000, 7.371, 7.418, 7.38, 7.388, 20881.292], [1658534400, 7.213, 7.385, 7.294, 7.377, 60665.739], [1658530800, 7.276, 7.375, 7.369, 7.295, 56816.385], [1658527200, 7.282, 7.381, 7.332, 7.369, 64536.961], [1658523600, 7.272, 7.344, 7.282, 7.326, 29989.04], [1658520000, 7.26, 7.337, 7.335, 7.282, 66764.012], [1658516400, 7.308, 7.612, 7.583, 7.34, 79959.55], [1658512800, 7.503, 7.597, 7.533, 7.591, 21435.91], [1658509200, 7.476, 7.596, 7.546, 7.533, 31218.248], [1658505600, 7.495, 7.567, 7.529, 7.548, 51212.076], [1658502000, 7.504, 7.726, 7.719, 7.53, 56076.911], [1658498400, 7.6, 7.734, 7.661, 7.716, 75989.016], [1658494800, 7.654, 7.787, 7.763, 7.661, 54939.803], [1658491200, 7.756, 7.839, 7.811, 7.761, 31512.331], [1658487600, 7.741, 7.819, 7.754, 7.819, 33053.277], [1658484000, 7.746, 7.852, 7.802, 7.755, 42323.3], [1658480400, 7.752, 7.856, 7.76, 7.802, 55242.29], [1658476800, 7.647, 7.776, 7.681, 7.758, 35896.558], [1658473200, 7.601, 7.723, 7.64, 7.68, 53925.818], [1658469600, 7.536, 7.661, 7.555, 7.652, 34437.151], [1658466000, 7.424, 7.558, 7.469, 7.558, 39740.596], [1658462400, 7.364, 7.48, 7.432, 7.472, 67656.304], [1658458800, 7.406, 7.481, 7.439, 7.434, 50543.697], [1658455200, 7.429, 7.548, 7.534, 7.439, 72493.563], [1658451600, 7.521, 7.639, 7.616, 7.533, 32496.937], [1658448000, 7.476, 7.642, 7.528, 7.617, 48755.328], [1658444400, 7.482, 7.575, 7.493, 7.528, 35168.918], [1658440800, 7.454, 7.554, 7.551, 7.498, 34617.127], [1658437200, 7.512, 7.557, 7.53, 7.549, 36166.904], [1658433600, 7.517, 7.595, 7.543, 7.534, 59872.014], [1658430000, 7.454, 7.552, 7.462, 7.543, 71718.682], [1658426400, 7.425, 7.478, 7.431, 7.459, 19435.392], [1658422800, 7.403, 7.525, 7.496, 7.426, 66497.603], [1658419200, 7.323, 7.499, 7.328, 7.497, 94203.395], [1658415600, 7.294, 7.341, 7.297, 7.328, 34549.631], [1658412000, 7.226, 7.373, 7.352, 7.296, 102327.883], [1658408400, 7.328, 7.401, 7.4, 7.357, 68885.066], [1658404800, 7.287, 7.439, 7.321, 7.4, 52864.118], [1658401200, 7.274, 7.367, 7.339, 7.323, 27804.8], [1658397600, 7.33, 7.431, 7.414, 7.337, 21318.889], [1658394000, 7.347, 7.419, 7.354, 7.419, 28526.796], [1658390400, 7.307, 7.386, 7.354, 7.357, 46690.642], [1658386800, 7.273, 7.411, 7.288, 7.354, 45022.086], [1658383200, 7.262, 7.331, 7.319, 7.277, 21506.536], [1658379600, 7.27, 7.339, 7.29, 7.313, 47857.664], [1658376000, 7.175, 7.308, 7.248, 7.29, 53597.506], [1658372400, 7.19, 7.284, 7.226, 7.251, 58243.357], [1658368800, 7.216, 7.456, 7.407, 7.223, 94148.888], [1658365200, 7.388, 7.515, 7.458, 7.408, 140489.718], [1658361600, 7.412, 7.548, 7.46, 7.459, 146197.699], [1658358000, 7.394, 7.53, 7.465, 7.469, 34262.795], [1658354400, 7.464, 7.615, 7.614, 7.467, 40507.083], [1658350800, 7.442, 7.657, 7.477, 7.627, 48942.166], [1658347200, 7.366, 7.73, 7.688, 7.471, 252734.474], [1658343600, 7.677, 7.793, 7.739, 7.687, 36525.709], [1658340000, 7.655, 7.777, 7.656, 7.745, 63712.24], [1658336400, 7.617, 7.765, 7.722, 7.658, 85434.3], [1658332800, 7.635, 7.969, 7.953, 7.726, 239805.413], [1658329200, 7.908, 8.017, 8.003, 7.95, 68511.897], [1658325600, 7.817, 8.003, 7.833, 8.003, 218867.648], [1658322000, 7.812, 7.986, 7.827, 7.841, 245241.14], [1658318400, 7.713, 7.877, 7.843, 7.827, 101884.125], [1658314800, 7.783, 7.935, 7.884, 7.844, 61964.101], [1658311200, 7.795, 7.977, 7.813, 7.886, 73838.591], [1658307600, 7.697, 7.84, 7.72, 7.811, 27101.747], [1658304000, 7.697, 7.884, 7.82, 7.724, 49169.304], [1658300400, 7.82, 8.078, 8.067, 7.825, 60982.481], [1658296800, 7.984, 8.081, 7.984, 8.075, 54082.747], [1658293200, 7.871, 7.992, 7.898, 7.984, 43259.168], [1658289600, 7.85, 7.932, 7.901, 7.899, 32754.092], [1658286000, 7.817, 7.928, 7.832, 7.902, 45606.522], [1658282400, 7.8, 7.854, 7.82, 7.833, 40548.086], [1658278800, 7.65, 7.833, 7.693, 7.818, 41360.54], [1658275200, 7.651, 7.822, 7.794, 7.692, 77751.656], [1658271600, 7.75, 7.98, 7.883, 7.794, 63449.641], [1658268000, 7.829, 7.941, 7.915, 7.883, 24720.999], [1658264400, 7.853, 7.934, 7.862, 7.915, 49517.427], [1658260800, 7.818, 7.896, 7.844, 7.861, 81888.868], [1658257200, 7.831, 7.96, 7.903, 7.842, 63475.869], [1658253600, 7.83, 7.988, 7.966, 7.901, 178444.678], [1658250000, 7.875, 8.006, 7.917, 7.974, 185176.091], [1658246400, 7.789, 8.032, 7.804, 7.917, 259843.836], [1658242800, 7.63, 7.876, 7.836, 7.804, 207396.772], [1658239200, 7.719, 7.871, 7.871, 7.836, 147550.112], [1658235600, 7.767, 7.924, 7.877, 7.876, 142701.915], [1658232000, 7.718, 7.889, 7.718, 7.876, 61627.012], [1658228400, 7.699, 7.815, 7.718, 7.725, 53691.694], [1658224800, 7.623, 7.743, 7.69, 7.717, 38955.286], [1658221200, 7.582, 7.71, 7.655, 7.69, 43092.165], [1658217600, 7.536, 7.668, 7.566, 7.655, 42330.831], [1658214000, 7.538, 7.643, 7.585, 7.568, 42365.298], [1658210400, 7.496, 7.706, 7.636, 7.591, 66452.019], [1658206800, 7.544, 7.688, 7.609, 7.635, 62324.821], [1658203200, 7.504, 7.649, 7.605, 7.604, 84309.893], [1658199600, 7.583, 7.772, 7.692, 7.603, 59696.07], [1658196000, 7.602, 7.715, 7.68, 7.693, 58921.54], [1658192400, 7.67, 7.933, 7.895, 7.686, 83767.5], [1658188800, 7.581, 7.99, 7.655, 7.885, 432259.159], [1658185200, 7.423, 7.72, 7.432, 7.654, 218790.752], [1658181600, 7.318, 7.447, 7.358, 7.436, 52192.438], [1658178000, 7.266, 7.383, 7.286, 7.352, 30525.368], [1658174400, 7.285, 7.371, 7.323, 7.292, 37717.224], [1658170800, 7.238, 7.376, 7.333, 7.327, 51355.457], [1658167200, 7.322, 7.425, 7.371, 7.328, 78410.321], [1658163600, 7.354, 7.522, 7.51, 7.374, 84407.697], [1658160000, 7.462, 7.683, 7.682, 7.515, 118623.702], [1658156400, 7.556, 7.723, 7.564, 7.682, 120674.76], [1658152800, 7.467, 7.566, 7.536, 7.564, 70243.654], [1658149200, 7.51, 7.611, 7.519, 7.535, 181430.331], [1658145600, 7.356, 7.527, 7.444, 7.519, 71188.456], [1658142000, 7.387, 7.57, 7.525, 7.443, 89241.468], [1658138400, 7.471, 7.588, 7.492, 7.52, 56669.278], [1658134800, 7.491, 7.559, 7.528, 7.496, 88121.02], [1658131200, 7.479, 7.629, 7.528, 7.527, 158894.017], [1658127600, 7.45, 7.57, 7.494, 7.525, 97736.302], [1658124000, 7.352, 7.525, 7.37, 7.496, 118137.078], [1658120400, 7.19, 7.376, 7.21, 7.37, 156965.396], [1658116800, 7.131, 7.207, 7.196, 7.207, 36305.534], [1658113200, 7.179, 7.257, 7.22, 7.192, 54117.702], [1658109600, 7.077, 7.23, 7.077, 7.217, 47469.229], [1658106000, 6.937, 7.09, 6.937, 7.079, 52700.544], [1658102400, 6.903, 7.014, 6.915, 6.935, 38560.416], [1658098800, 6.904, 7.029, 7.009, 6.919, 54690.163], [1658095200, 6.978, 7.057, 7.03, 7.013, 16281.538], [1658091600, 6.97, 7.041, 6.999, 7.025, 14944.53], [1658088000, 6.97, 7.02, 7.007, 6.996, 22346.306], [1658084400, 6.954, 7.034, 6.963, 7.008, 28809.163], [1658080800, 6.904, 7, 6.925, 6.962, 32401.028], [1658077200, 6.874, 7.131, 7.001, 6.92, 50743.928], [1658073600, 6.9, 7.052, 7.025, 7.003, 164591.194], [1658070000, 6.997, 7.086, 7.054, 7.02, 58368.985], [1658066400, 7.016, 7.094, 7.027, 7.05, 39022.429], [1658062800, 6.995, 7.106, 7.1, 7.023, 64513.946], [1658059200, 7.084, 7.156, 7.134, 7.102, 23138.098], [1658055600, 7.075, 7.147, 7.127, 7.132, 18677.519], [1658052000, 7.068, 7.14, 7.135, 7.122, 18011.737], [1658048400, 7.101, 7.208, 7.185, 7.134, 36126.944], [1658044800, 7.12, 7.231, 7.209, 7.189, 57876.246], [1658041200, 7.206, 7.326, 7.314, 7.206, 33242.125], [1658037600, 7.162, 7.32, 7.163, 7.314, 67819.641], [1658034000, 7.147, 7.203, 7.158, 7.158, 39320.044], [1658030400, 7.141, 7.2, 7.171, 7.157, 27433.51], [1658026800, 7.098, 7.209, 7.102, 7.172, 49799.447], [1658023200, 7.086, 7.128, 7.107, 7.102, 24519.27], [1658019600, 7.074, 7.173, 7.152, 7.107, 39145.11], [1658016000, 7.139, 7.254, 7.193, 7.149, 46752.348], [1658012400, 7.143, 7.209, 7.209, 7.192, 135823.364], [1658008800, 7.095, 7.218, 7.114, 7.21, 62746.369], [1658005200, 7.096, 7.148, 7.126, 7.113, 112403.837], [1658001600, 7.027, 7.131, 7.089, 7.131, 183634.507], [1657998000, 7.08, 7.156, 7.098, 7.089, 165818.832], [1657994400, 7.047, 7.112, 7.051, 7.099, 50110.136], [1657990800, 7.052, 7.184, 7.114, 7.052, 100695.151], [1657987200, 6.832, 7.14, 6.835, 7.116, 192736.09], [1657983600, 6.703, 6.84, 6.706, 6.836, 172911.052], [1657980000, 6.67, 6.725, 6.719, 6.703, 29236.867], [1657976400, 6.659, 6.735, 6.664, 6.719, 58190.039], [1657972800, 6.606, 6.69, 6.616, 6.664, 42860.429], [1657969200, 6.6, 6.64, 6.613, 6.612, 64609.406], [1657965600, 6.587, 6.638, 6.6, 6.614, 14877.15], [1657962000, 6.59, 6.622, 6.606, 6.601, 8862.991], [1657958400, 6.574, 6.636, 6.584, 6.606, 16317.024], [1657954800, 6.561, 6.653, 6.637, 6.583, 31567.031], [1657951200, 6.613, 6.687, 6.687, 6.642, 21051.792], [1657947600, 6.68, 6.757, 6.75, 6.685, 22112.458], [1657944000, 6.707, 6.769, 6.758, 6.75, 26845.566], [1657940400, 6.726, 6.764, 6.736, 6.758, 17458.79], [1657936800, 6.686, 6.757, 6.746, 6.736, 13892.164], [1657933200, 6.695, 6.759, 6.704, 6.746, 30614.027], [1657929600, 6.69, 6.811, 6.795, 6.705, 63665.227], [1657926000, 6.772, 6.886, 6.882, 6.794, 34030.475], [1657922400, 6.773, 6.884, 6.865, 6.881, 140641.006], [1657918800, 6.808, 6.886, 6.847, 6.863, 91282.487], [1657915200, 6.812, 6.99, 6.945, 6.844, 61685.212], [1657911600, 6.848, 6.95, 6.905, 6.94, 47148.725], [1657908000, 6.763, 6.91, 6.774, 6.903, 68743.361], [1657904400, 6.766, 6.867, 6.788, 6.774, 51122.22], [1657900800, 6.747, 6.843, 6.816, 6.792, 40357.845], [1657897200, 6.817, 6.922, 6.897, 6.817, 131956.794], [1657893600, 6.86, 6.92, 6.894, 6.891, 64901.284], [1657890000, 6.84, 6.944, 6.915, 6.888, 52899.135], [1657886400, 6.801, 6.939, 6.842, 6.917, 91997.088], [1657882800, 6.829, 6.931, 6.916, 6.832, 139096.887], [1657879200, 6.866, 6.942, 6.882, 6.917, 37796.547], [1657875600, 6.799, 6.926, 6.799, 6.879, 45568.207], [1657872000, 6.77, 6.849, 6.781, 6.795, 30090.963], [1657868400, 6.711, 6.792, 6.737, 6.777, 30540.489], [1657864800, 6.703, 6.761, 6.737, 6.74, 24277.697], [1657861200, 6.669, 6.738, 6.702, 6.734, 32007.67], [1657857600, 6.668, 6.733, 6.716, 6.701, 62714.493], [1657854000, 6.67, 6.725, 6.701, 6.714, 79403.512], [1657850400, 6.684, 6.805, 6.766, 6.702, 46883.509], [1657846800, 6.659, 6.772, 6.663, 6.767, 28932.947], [1657843200, 6.652, 6.754, 6.72, 6.664, 31356.851], [1657839600, 6.662, 6.748, 6.675, 6.722, 34428.985], [1657836000, 6.627, 6.69, 6.666, 6.673, 58298.013], [1657832400, 6.659, 6.742, 6.735, 6.667, 23604.338], [1657828800, 6.699, 6.758, 6.714, 6.735, 26910.043], [1657825200, 6.667, 6.764, 6.715, 6.715, 47693.14], [1657821600, 6.683, 6.737, 6.709, 6.713, 54033.659], [1657818000, 6.5, 6.723, 6.514, 6.707, 83289.997], [1657814400, 6.488, 6.595, 6.539, 6.516, 40855.69], [1657810800, 6.389, 6.545, 6.396, 6.538, 65016.077], [1657807200, 6.313, 6.409, 6.335, 6.392, 27814.187], [1657803600, 6.288, 6.392, 6.373, 6.336, 43888.601], [1657800000, 6.292, 6.388, 6.342, 6.371, 49740.876], [1657796400, 6.3, 6.376, 6.353, 6.343, 29900.462], [1657792800, 6.333, 6.39, 6.357, 6.358, 16987.245], [1657789200, 6.28, 6.365, 6.345, 6.36, 42898.127], [1657785600, 6.344, 6.448, 6.434, 6.347, 35222.694], [1657782000, 6.428, 6.496, 6.492, 6.436, 15917.642], [1657778400, 6.447, 6.509, 6.491, 6.494, 26857.91], [1657774800, 6.414, 6.506, 6.418, 6.495, 26133.458], [1657771200, 6.412, 6.486, 6.462, 6.419, 19789.83], [1657767600, 6.456, 6.5, 6.481, 6.456, 22159.804], [1657764000, 6.459, 6.515, 6.504, 6.481, 27497.279], [1657760400, 6.447, 6.512, 6.469, 6.501, 34294.619], [1657756800, 6.434, 6.503, 6.461, 6.469, 40280.369], [1657753200, 6.336, 6.483, 6.337, 6.464, 92744.472], [1657749600, 6.325, 6.403, 6.355, 6.339, 24014.29], [1657746000, 6.272, 6.364, 6.282, 6.353, 88169.973], [1657742400, 6.271, 6.304, 6.28, 6.28, 48027.182], [1657738800, 6.276, 6.347, 6.328, 6.281, 31728.472], [1657735200, 6.306, 6.361, 6.361, 6.332, 49585.748], [1657731600, 6.282, 6.407, 6.284, 6.358, 63121.903], [1657728000, 6.177, 6.29, 6.234, 6.284, 58617.282], [1657724400, 6.222, 6.31, 6.284, 6.239, 37560.966], [1657720800, 6.167, 6.32, 6.189, 6.282, 87408.728], [1657717200, 6.072, 6.201, 6.161, 6.19, 143496.914], [1657713600, 6, 6.547, 6.463, 6.163, 276234.271], [1657710000, 6.431, 6.483, 6.452, 6.467, 18132.929], [1657706400, 6.427, 6.468, 6.46, 6.451, 14533.942], [1657702800, 6.456, 6.5, 6.491, 6.459, 16545.6], [1657699200, 6.428, 6.503, 6.458, 6.487, 39949.406], [1657695600, 6.38, 6.457, 6.395, 6.457, 23044.002], [1657692000, 6.363, 6.401, 6.395, 6.393, 18200.803], [1657688400, 6.348, 6.431, 6.37, 6.39, 29825.32], [1657684800, 6.351, 6.386, 6.358, 6.37, 8242.119], [1657681200, 6.34, 6.383, 6.372, 6.358, 24097.288], [1657677600, 6.329, 6.389, 6.329, 6.372, 33050.104], [1657674000, 6.314, 6.366, 6.333, 6.329, 38140.618], [1657670400, 6.213, 6.336, 6.279, 6.334, 90699.08], [1657666800, 6.25, 6.39, 6.365, 6.273, 75028.732], [1657663200, 6.331, 6.404, 6.357, 6.361, 37414.095], [1657659600, 6.357, 6.418, 6.407, 6.357, 27480.57], [1657656000, 6.359, 6.423, 6.375, 6.408, 36861.169], [1657652400, 6.3, 6.421, 6.411, 6.373, 96045.89], [1657648800, 6.401, 6.497, 6.497, 6.416, 29211.27]]

        return data

    def get_graph(self, product, grain):

        data = self._get_data(product=product, grain=grain)

        df, moving_range, last_times, last_price = self._make_into_data_frame(data)

        two_points = [[(last_times[0], last_price), (last_times[1], moving_range[1])],
                      [(last_times[0], last_price), (last_times[1], moving_range[0])]]

        mc = mpf.make_marketcolors(up='white', down='white',
                                   edge='black',
                                   wick={'up': 'black', 'down': 'black'}

                                   )

        s = mpf.make_mpf_style(marketcolors=mc,
                               #gridcolor='#DADADA',
                               #gridstyle='solid',
                               #gridaxis='horizontal',
                               y_on_right=True
                               )

        fig, axlist = mpf.plot(df, type='candle',
                 volume=False,
                 title=product,
                 style=s,

                 update_width_config=dict(candle_linewidth=0.3,
                                          candle_width=.65),

                 #alines=dict(alines=two_points, alpha=0.5, linewidths=2, colors=['black']),

                 returnfig=True

                 )

        return fig

    def _get_projected_move(self, input_data):

        percentage_data = []
        time_period = 4

        for index, price_point in enumerate(input_data):
            try:
                start_val = price_point
                end_val = input_data[index+time_period]

                difference = float(end_val) - float(start_val)
                percentage_change = (difference/start_val)
                percentage_data.append(percentage_change)

            except IndexError:
                break

        avg = sum(percentage_data)/len(percentage_data)

        percentage_of_price = input_data[0] * avg

        move_range = [input_data[-1] - percentage_of_price, input_data[-1] + percentage_of_price]

        if move_range[0] > move_range[1]:
            move_range = move_range[::-1]

        return move_range, time_period

    def _make_into_data_frame(self, input_data):
        # time , low, high, open, close, volume

        time_periods_to_display = 24

        open_arr = []
        high_arr = []
        low_arr = []
        close_arr = []
        volume_arr = []
        time_arr = []

        for row in input_data:

            dt = datetime.datetime.fromtimestamp(row[0])
            time_arr.append(dt)
            low_arr.append(row[1])
            high_arr.append(row[2])
            open_arr.append(row[3])
            close_arr.append(row[4])
            volume_arr.append(row[5])

        time_arr = time_arr[::-1]
        low_arr = low_arr[::-1]
        high_arr = high_arr[::-1]
        open_arr = open_arr[::-1]
        close_arr = close_arr[::-1]
        volume_arr = volume_arr[::-1]

        move_range, time_period = self._get_projected_move(close_arr)

        length = len(time_arr)
        up_bound = length-1
        down_bound = length-time_periods_to_display-1

        time_arr = time_arr[down_bound: up_bound]
        low_arr = low_arr[down_bound: up_bound]
        high_arr = high_arr[down_bound: up_bound]
        open_arr = open_arr[down_bound: up_bound]
        close_arr = close_arr[down_bound: up_bound]
        volume_arr = volume_arr[down_bound: up_bound]

        some_time = input_data[0][0]

        last_price = close_arr[-1]

        for i in range(time_period+1):
            some_time += 3600
            dt = datetime.datetime.fromtimestamp(some_time)
            time_arr.append(dt)
            low_arr.append(None)
            high_arr.append(None)
            open_arr.append(None)
            close_arr.append(None)
            volume_arr.append(None)

        pre_pd_dict = {'DatetimeIndex': time_arr, 'Open': open_arr, 'High': high_arr, 'Low': low_arr, 'Close': close_arr,
                       'Volume': volume_arr}

        last_times = [pre_pd_dict['DatetimeIndex'][len(time_arr)-time_period-2],
                      pre_pd_dict['DatetimeIndex'][len(time_arr)-1]]

        data_frame = pd.DataFrame(pre_pd_dict)
        data_frame = data_frame.set_index('DatetimeIndex')

        return data_frame, move_range, last_times, last_price

'''

g = FigureMaker()

fig = g.get_graph('ETH-USD', 3600)

'''
